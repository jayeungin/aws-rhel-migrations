---
- name: Duplicate EC2 instance with EBS snapshot, remount, tag copy, package transfer using dnf, and IP assignment
  hosts: localhost
  gather_facts: no
  vars:
    source_instance_id: i-00000000000000000 ### Instance ID here ###
    new_ami_id: ami-0011223344 ### RHEL CPPO AMI ID ###
    region: us-east-1 ### Region ###
  collections:
    - amazon.aws
    - ansible.builtin

  tasks:
    - name: Gather info about a running EC2 instance using instance-id and store as them as variables
      amazon.aws.ec2_instance_info:
        instance_ids:
          - "{{ source_instance_id }}"
        region: "{{ region }}"
      register: old_ec2_info

    - name: Snapshot the EBS volumes for the running EC2
      amazon.aws.ec2_snapshot:
        instance_id: "{{ old_ec2_info.instances[0].instance_id }}"
        device_name: "{{ item.device_name }}"
        region: "{{ old_ec2_info.instances[0].region }}"
        wait: true
      loop: "{{ old_ec2_info.instances[0].block_device_mappings }}"
      when: item.device_name is match("/dev/sd[b-z]")

    - name: Create a new EC2 instance using a different ami and matching instance info as the running EC2
      amazon.aws.ec2_instance:
        image_id: "{{ new_ami_id }}"
        instance_id: "{{ source_instance_id }}"
        key_name: "{{ old_ec2_info.instances[0].key_name }}"        
        instance_type: "{{ old_ec2_info.instances[0].instance_type }}"
        region: "{{ old_ec2_info.instances[0].region }}"
        availability_zone: "{{ old_ec2_info.instances[0].availability_zone }}"
        security_groups: "{{ old_ec2_info.instances[0].security_groups }}"
        instance_tags:
          Name: "CPPO-Copy-{{ instance_id }}"
          Environment: "{{ old_ec2_info.instances[0].tags.Environment | default('Unknown') }}"
        wait: true
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: 10
            delete_on_termination: true
      register: new_ec2_info

    - name: Assign source networking to the new EC2 instance
      amazon.aws.ec2_network_interface:
        region: "{{ old_ec2_info.instances[0].region }}"
        instance_id: "{{ new_ec2_info.instances[0].id }}"
        private_ip: "{{ old_ec2_info.instances[0].private_ip }}"
        subnet_id: "{{ old_ec2_info.instances[0].subnet_id }}"  # Ensure subnet_id is correct
        associate_public_ip: no  # Private IP only
        state: present
      register: eni

    - name: Turn off the original EC2
      amazon.aws.ec2_instance:
        instance_ids:
          - "{{ old_ec2_info.instances[0].instance_id }}"
        state: stopped
        region: "{{ old_ec2_info.instances[0].region }}"
        wait: true

    - name: Remount the EBS volumes to the new EC2
      amazon.aws.ec2_vol:
        instance: "{{ new_ec2_info.instance_ids[0] }}"
        id: "{{ item.volume_id }}"
        device_name: "{{ item.device_name }}"
        region: "{{ old_ec2_info.instances[0].region }}"
        state: present
      loop: "{{ old_ec2_info.instances[0].block_device_mappings }}"
      when: item.device_name is match("/dev/sd[b-z]")

    - name: Turn on the new EC2
      amazon.aws.ec2_instance:
        instance_ids:
          - "{{ new_ec2_info.instance_ids[0] }}"
        state: running
        region: "{{ old_ec2_info.instances[0].region }}"
        wait: true

    - name: Output the original EC2 information and the new EC2 information
      ansible.builtin.debug:
        msg:
          - "Original EC2 Info: {{ old_ec2_info }}"
          - "New EC2 Info: {{ new_ec2_info }}"