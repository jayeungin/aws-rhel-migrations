---
- name: Gather information about a running EC2 instance using instance-id and store as them as variables
  ec2_instance_facts:
    instance_ids:
      - i-00000000000000000
    region: us-east-1
  register: ec2_info

- name: Snapshot the EBS volumes for the running EC2
  ec2_snapshot:
    instance_id: "{{ ec2_info.instances[0].instance_id }}"
    device_name: "{{ item.device_name }}"
    region: us-east-1
    wait: true
  loop: "{{ ec2_info.instances[0].block_device_mappings }}"
  when: item.device_name is match("/dev/sd[b-z]")

- name: Create a new EC2 instance using a different ami and matching instance info as the running EC2
  ec2:
    image_id: ami-00000000000000000
    instance_type: "{{ ec2_info.instances[0].instance_type }}"
    key_name: "{{ _key_name_ }}"
    region: us-east-1
    wait: true
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 10
        delete_on_termination: true
      - device_name: /dev/sdb
        volume_type: gp2
        volume_size: 10
        delete_on_termination: true
  register: new_ec2_info

- name: Turn off the original EC2
  ec2:
    instance_ids:
      - "{{ ec2_info.instances[0].instance_id }}"
    state: stopped
    region: us-east-1
    wait: true

- name: Remount the EBS volumes to the new EC2
  ec2_vol:
    instance: "{{ new_ec2_info.instance_ids[0] }}"
    id: "{{ item.volume_id }}"
    device_name: "{{ item.device_name }}"
    region: us-east-1
    state: present
  loop: "{{ ec2_info.instances[0].block_device_mappings }}"
  when: item.device_name is match("/dev/sd[b-z]")

- name: Turn on the new EC2
  ec2:
    instance_ids:
      - "{{ new_ec2_info.instance_ids[0] }}"
    state: running
    region: us-east-1
    wait: true

- name: Output the original EC2 information and the new EC2 information
  ansible.builtin.debug:
    msg:
      - "Original EC2 Info: {{ ec2_info }}"
      - "New EC2 Info: {{ new_ec2_info }}"
